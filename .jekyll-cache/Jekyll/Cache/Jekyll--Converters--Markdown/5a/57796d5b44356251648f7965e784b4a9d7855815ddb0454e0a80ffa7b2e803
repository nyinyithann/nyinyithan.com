I"½<p>In this post, Iâ€™ll describe how I configured NeoVim in Lua for OCaml development.
First of all, NeoVim and OCaml need to be installed. Please check out the following links if you havenâ€™t already installed them.</p>
<ul>
  <li>NeoVim: <a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">https://github.com/neovim/neovim/wiki/Installing-Neovim</a></li>
  <li>OCaml: <a href="https://ocaml.org/docs/up-and-running">https://ocaml.org/docs/up-and-running</a></li>
</ul>

<p>The following OCaml packages are necessary to be installed.</p>
<ul>
  <li><a href="https://opam.ocaml.org/packages/ocaml-lsp-server/">ocaml-lsp-server</a></li>
  <li><a href="https://opam.ocaml.org/packages/ocamlformat/">ocamlformat</a></li>
  <li><a href="https://opam.ocaml.org/packages/ocamlformat-rpc/">ocamlformat-rpc</a>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>opam <span class="nb">install </span>ocaml-lsp-server
opam <span class="nb">install </span>ocamlformat
opam <span class="nb">install </span>ocamlformat-rpc
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="basic-lua">Basic Lua</h3>
<p>Lua is used in the entire setup, and in this section, Iâ€™ll highligh the essential knowledge of Lua required for the setup.</p>

<p>Lua has the following types:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">nil</code> â€” represents the absence of a useful value</li>
  <li><code class="language-plaintext highlighter-rouge">boolean</code> â€” true and false</li>
  <li><code class="language-plaintext highlighter-rouge">number</code> â€” double-precision floating-point numbers</li>
  <li><code class="language-plaintext highlighter-rouge">string</code> â€” immutable sequence of bytes</li>
  <li><code class="language-plaintext highlighter-rouge">table</code> â€” associative arrays</li>
  <li><code class="language-plaintext highlighter-rouge">userdata</code> â€” pointer to a block of raw memory</li>
  <li><code class="language-plaintext highlighter-rouge">thread</code> â€”  represents independent threads of execution</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">userdata</code> and <code class="language-plaintext highlighter-rouge">thread</code> are not used in this setup.</p>

<p>Lua has global and local variables. <code class="language-plaintext highlighter-rouge">nil</code> is the default value of any non-initialized variables.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">local</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">-- local variable</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">-- here y is global variable</span>
<span class="kd">local</span> <span class="n">z</span> <span class="c1">-- z is nil</span>
</code></pre></div></div>

<p>Lua has <code class="language-plaintext highlighter-rouge">table</code> type which implements associative array. Lua <code class="language-plaintext highlighter-rouge">table</code> can be used as an array or a record. 
If itâ€™s used as an array, index starts at 1.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1">-- create an empty table</span>

<span class="c1">-- table as array </span>
<span class="kd">local</span> <span class="n">vowels</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"a"</span><span class="p">,</span> <span class="s2">"e"</span><span class="p">,</span> <span class="s2">"i"</span><span class="p">,</span> <span class="s2">"o"</span><span class="p">,</span> <span class="s2">"u"</span> <span class="p">}</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vowels</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">--&gt; nil</span>
<span class="nb">print</span><span class="p">(</span><span class="n">vowels</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1">--&gt; "a"  (array index starts at 1)</span>

<span class="c1">-- table as record (key/value pairs)</span>
<span class="kd">local</span> <span class="n">person</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="p">[</span><span class="s2">"name"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Pip"</span><span class="p">,</span> 
  <span class="p">[</span><span class="s2">"age"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span> 
<span class="p">}</span>
<span class="nb">print</span><span class="p">(</span><span class="n">person</span><span class="p">[</span><span class="s2">"name"</span><span class="p">])</span> <span class="c1">--&gt; "Pip"</span>
<span class="nb">print</span><span class="p">(</span><span class="n">person</span><span class="p">[</span><span class="s2">"age"</span><span class="p">])</span> <span class="c1">--&gt; 10</span>

<span class="c1">-- table as class</span>
<span class="kd">local</span> <span class="n">Point</span> <span class="o">=</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">4</span><span class="p">.</span><span class="mi">2</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">4</span><span class="p">.</span><span class="mi">5</span> <span class="p">}</span>

<span class="k">function</span> <span class="nf">Point</span><span class="p">:</span><span class="n">getX</span> <span class="p">()</span> 
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Point</span><span class="p">:</span><span class="n">setX</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> 
    <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">v</span>
<span class="k">end</span>

<span class="nb">print</span><span class="p">(</span><span class="n">Point</span><span class="p">:</span><span class="n">getX</span><span class="p">())</span> <span class="c1">--&gt; 4.2</span>
<span class="n">Point</span><span class="p">:</span><span class="n">setX</span><span class="p">(</span><span class="mi">7</span><span class="p">.</span><span class="mi">4</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">Point</span><span class="p">:</span><span class="n">getX</span><span class="p">())</span> <span class="c1">--&gt; 7.4</span>


<span class="c1">-- or like this</span>
<span class="kd">local</span> <span class="n">tbl</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"x"</span><span class="p">,</span> <span class="s2">"y"</span><span class="p">,</span> <span class="s2">"z"</span><span class="p">,</span> <span class="p">[</span><span class="s2">"name"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Neo"</span><span class="p">,</span> <span class="p">[</span><span class="s2">"age"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span> <span class="p">}</span>
<span class="nb">print</span><span class="p">(</span><span class="n">tbl</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1">--&gt; x</span>
<span class="nb">print</span><span class="p">(</span><span class="n">tbl</span><span class="p">[</span><span class="s2">"name"</span><span class="p">])</span> <span class="c1">--&gt; "Neo"</span>
</code></pre></div></div>

:ET